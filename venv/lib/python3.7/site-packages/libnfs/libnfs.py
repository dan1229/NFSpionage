# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libnfs', [dirname(__file__)])
        except ImportError:
            import _libnfs
            return _libnfs
        if fp is not None:
            try:
                _mod = imp.load_module('_libnfs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libnfs = swig_import_helper()
    del swig_import_helper
else:
    import _libnfs
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_NFSFileHandle():
  return _libnfs.new_NFSFileHandle()
new_NFSFileHandle = _libnfs.new_NFSFileHandle

def copy_NFSFileHandle(*args):
  return _libnfs.copy_NFSFileHandle(*args)
copy_NFSFileHandle = _libnfs.copy_NFSFileHandle

def delete_NFSFileHandle(*args):
  return _libnfs.delete_NFSFileHandle(*args)
delete_NFSFileHandle = _libnfs.delete_NFSFileHandle

def NFSFileHandle_assign(*args):
  return _libnfs.NFSFileHandle_assign(*args)
NFSFileHandle_assign = _libnfs.NFSFileHandle_assign

def NFSFileHandle_value(*args):
  return _libnfs.NFSFileHandle_value(*args)
NFSFileHandle_value = _libnfs.NFSFileHandle_value

def new_uint64_t_ptr():
  return _libnfs.new_uint64_t_ptr()
new_uint64_t_ptr = _libnfs.new_uint64_t_ptr

def copy_uint64_t_ptr(*args):
  return _libnfs.copy_uint64_t_ptr(*args)
copy_uint64_t_ptr = _libnfs.copy_uint64_t_ptr

def delete_uint64_t_ptr(*args):
  return _libnfs.delete_uint64_t_ptr(*args)
delete_uint64_t_ptr = _libnfs.delete_uint64_t_ptr

def uint64_t_ptr_assign(*args):
  return _libnfs.uint64_t_ptr_assign(*args)
uint64_t_ptr_assign = _libnfs.uint64_t_ptr_assign

def uint64_t_ptr_value(*args):
  return _libnfs.uint64_t_ptr_value(*args)
uint64_t_ptr_value = _libnfs.uint64_t_ptr_value

def new_NFSDirHandle():
  return _libnfs.new_NFSDirHandle()
new_NFSDirHandle = _libnfs.new_NFSDirHandle

def copy_NFSDirHandle(*args):
  return _libnfs.copy_NFSDirHandle(*args)
copy_NFSDirHandle = _libnfs.copy_NFSDirHandle

def delete_NFSDirHandle(*args):
  return _libnfs.delete_NFSDirHandle(*args)
delete_NFSDirHandle = _libnfs.delete_NFSDirHandle

def NFSDirHandle_assign(*args):
  return _libnfs.NFSDirHandle_assign(*args)
NFSDirHandle_assign = _libnfs.NFSDirHandle_assign

def NFSDirHandle_value(*args):
  return _libnfs.NFSDirHandle_value(*args)
NFSDirHandle_value = _libnfs.NFSDirHandle_value
class timeval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timeval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timeval, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tv_sec"] = _libnfs.timeval_tv_sec_set
    __swig_getmethods__["tv_sec"] = _libnfs.timeval_tv_sec_get
    if _newclass:tv_sec = _swig_property(_libnfs.timeval_tv_sec_get, _libnfs.timeval_tv_sec_set)
    __swig_setmethods__["tv_usec"] = _libnfs.timeval_tv_usec_set
    __swig_getmethods__["tv_usec"] = _libnfs.timeval_tv_usec_get
    if _newclass:tv_usec = _swig_property(_libnfs.timeval_tv_usec_get, _libnfs.timeval_tv_usec_set)
    def __init__(self): 
        this = _libnfs.new_timeval()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libnfs.delete_timeval
    __del__ = lambda self : None;
timeval_swigregister = _libnfs.timeval_swigregister
timeval_swigregister(timeval)

class nfs_url(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nfs_url, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nfs_url, name)
    __repr__ = _swig_repr
    __swig_setmethods__["server"] = _libnfs.nfs_url_server_set
    __swig_getmethods__["server"] = _libnfs.nfs_url_server_get
    if _newclass:server = _swig_property(_libnfs.nfs_url_server_get, _libnfs.nfs_url_server_set)
    __swig_setmethods__["path"] = _libnfs.nfs_url_path_set
    __swig_getmethods__["path"] = _libnfs.nfs_url_path_get
    if _newclass:path = _swig_property(_libnfs.nfs_url_path_get, _libnfs.nfs_url_path_set)
    __swig_setmethods__["file"] = _libnfs.nfs_url_file_set
    __swig_getmethods__["file"] = _libnfs.nfs_url_file_get
    if _newclass:file = _swig_property(_libnfs.nfs_url_file_get, _libnfs.nfs_url_file_set)
    def __init__(self): 
        this = _libnfs.new_nfs_url()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libnfs.delete_nfs_url
    __del__ = lambda self : None;
nfs_url_swigregister = _libnfs.nfs_url_swigregister
nfs_url_swigregister(nfs_url)

class nfs_stat_64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nfs_stat_64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nfs_stat_64, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nfs_dev"] = _libnfs.nfs_stat_64_nfs_dev_set
    __swig_getmethods__["nfs_dev"] = _libnfs.nfs_stat_64_nfs_dev_get
    if _newclass:nfs_dev = _swig_property(_libnfs.nfs_stat_64_nfs_dev_get, _libnfs.nfs_stat_64_nfs_dev_set)
    __swig_setmethods__["nfs_ino"] = _libnfs.nfs_stat_64_nfs_ino_set
    __swig_getmethods__["nfs_ino"] = _libnfs.nfs_stat_64_nfs_ino_get
    if _newclass:nfs_ino = _swig_property(_libnfs.nfs_stat_64_nfs_ino_get, _libnfs.nfs_stat_64_nfs_ino_set)
    __swig_setmethods__["nfs_mode"] = _libnfs.nfs_stat_64_nfs_mode_set
    __swig_getmethods__["nfs_mode"] = _libnfs.nfs_stat_64_nfs_mode_get
    if _newclass:nfs_mode = _swig_property(_libnfs.nfs_stat_64_nfs_mode_get, _libnfs.nfs_stat_64_nfs_mode_set)
    __swig_setmethods__["nfs_nlink"] = _libnfs.nfs_stat_64_nfs_nlink_set
    __swig_getmethods__["nfs_nlink"] = _libnfs.nfs_stat_64_nfs_nlink_get
    if _newclass:nfs_nlink = _swig_property(_libnfs.nfs_stat_64_nfs_nlink_get, _libnfs.nfs_stat_64_nfs_nlink_set)
    __swig_setmethods__["nfs_uid"] = _libnfs.nfs_stat_64_nfs_uid_set
    __swig_getmethods__["nfs_uid"] = _libnfs.nfs_stat_64_nfs_uid_get
    if _newclass:nfs_uid = _swig_property(_libnfs.nfs_stat_64_nfs_uid_get, _libnfs.nfs_stat_64_nfs_uid_set)
    __swig_setmethods__["nfs_gid"] = _libnfs.nfs_stat_64_nfs_gid_set
    __swig_getmethods__["nfs_gid"] = _libnfs.nfs_stat_64_nfs_gid_get
    if _newclass:nfs_gid = _swig_property(_libnfs.nfs_stat_64_nfs_gid_get, _libnfs.nfs_stat_64_nfs_gid_set)
    __swig_setmethods__["nfs_rdev"] = _libnfs.nfs_stat_64_nfs_rdev_set
    __swig_getmethods__["nfs_rdev"] = _libnfs.nfs_stat_64_nfs_rdev_get
    if _newclass:nfs_rdev = _swig_property(_libnfs.nfs_stat_64_nfs_rdev_get, _libnfs.nfs_stat_64_nfs_rdev_set)
    __swig_setmethods__["nfs_size"] = _libnfs.nfs_stat_64_nfs_size_set
    __swig_getmethods__["nfs_size"] = _libnfs.nfs_stat_64_nfs_size_get
    if _newclass:nfs_size = _swig_property(_libnfs.nfs_stat_64_nfs_size_get, _libnfs.nfs_stat_64_nfs_size_set)
    __swig_setmethods__["nfs_blksize"] = _libnfs.nfs_stat_64_nfs_blksize_set
    __swig_getmethods__["nfs_blksize"] = _libnfs.nfs_stat_64_nfs_blksize_get
    if _newclass:nfs_blksize = _swig_property(_libnfs.nfs_stat_64_nfs_blksize_get, _libnfs.nfs_stat_64_nfs_blksize_set)
    __swig_setmethods__["nfs_blocks"] = _libnfs.nfs_stat_64_nfs_blocks_set
    __swig_getmethods__["nfs_blocks"] = _libnfs.nfs_stat_64_nfs_blocks_get
    if _newclass:nfs_blocks = _swig_property(_libnfs.nfs_stat_64_nfs_blocks_get, _libnfs.nfs_stat_64_nfs_blocks_set)
    __swig_setmethods__["nfs_atime"] = _libnfs.nfs_stat_64_nfs_atime_set
    __swig_getmethods__["nfs_atime"] = _libnfs.nfs_stat_64_nfs_atime_get
    if _newclass:nfs_atime = _swig_property(_libnfs.nfs_stat_64_nfs_atime_get, _libnfs.nfs_stat_64_nfs_atime_set)
    __swig_setmethods__["nfs_mtime"] = _libnfs.nfs_stat_64_nfs_mtime_set
    __swig_getmethods__["nfs_mtime"] = _libnfs.nfs_stat_64_nfs_mtime_get
    if _newclass:nfs_mtime = _swig_property(_libnfs.nfs_stat_64_nfs_mtime_get, _libnfs.nfs_stat_64_nfs_mtime_set)
    __swig_setmethods__["nfs_ctime"] = _libnfs.nfs_stat_64_nfs_ctime_set
    __swig_getmethods__["nfs_ctime"] = _libnfs.nfs_stat_64_nfs_ctime_get
    if _newclass:nfs_ctime = _swig_property(_libnfs.nfs_stat_64_nfs_ctime_get, _libnfs.nfs_stat_64_nfs_ctime_set)
    __swig_setmethods__["nfs_atime_nsec"] = _libnfs.nfs_stat_64_nfs_atime_nsec_set
    __swig_getmethods__["nfs_atime_nsec"] = _libnfs.nfs_stat_64_nfs_atime_nsec_get
    if _newclass:nfs_atime_nsec = _swig_property(_libnfs.nfs_stat_64_nfs_atime_nsec_get, _libnfs.nfs_stat_64_nfs_atime_nsec_set)
    __swig_setmethods__["nfs_mtime_nsec"] = _libnfs.nfs_stat_64_nfs_mtime_nsec_set
    __swig_getmethods__["nfs_mtime_nsec"] = _libnfs.nfs_stat_64_nfs_mtime_nsec_get
    if _newclass:nfs_mtime_nsec = _swig_property(_libnfs.nfs_stat_64_nfs_mtime_nsec_get, _libnfs.nfs_stat_64_nfs_mtime_nsec_set)
    __swig_setmethods__["nfs_ctime_nsec"] = _libnfs.nfs_stat_64_nfs_ctime_nsec_set
    __swig_getmethods__["nfs_ctime_nsec"] = _libnfs.nfs_stat_64_nfs_ctime_nsec_get
    if _newclass:nfs_ctime_nsec = _swig_property(_libnfs.nfs_stat_64_nfs_ctime_nsec_get, _libnfs.nfs_stat_64_nfs_ctime_nsec_set)
    __swig_setmethods__["nfs_used"] = _libnfs.nfs_stat_64_nfs_used_set
    __swig_getmethods__["nfs_used"] = _libnfs.nfs_stat_64_nfs_used_get
    if _newclass:nfs_used = _swig_property(_libnfs.nfs_stat_64_nfs_used_get, _libnfs.nfs_stat_64_nfs_used_set)
    def __init__(self): 
        this = _libnfs.new_nfs_stat_64()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libnfs.delete_nfs_stat_64
    __del__ = lambda self : None;
nfs_stat_64_swigregister = _libnfs.nfs_stat_64_swigregister
nfs_stat_64_swigregister(nfs_stat_64)

class nfsdirent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nfsdirent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nfsdirent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libnfs.nfsdirent_next_set
    __swig_getmethods__["next"] = _libnfs.nfsdirent_next_get
    if _newclass:next = _swig_property(_libnfs.nfsdirent_next_get, _libnfs.nfsdirent_next_set)
    __swig_setmethods__["name"] = _libnfs.nfsdirent_name_set
    __swig_getmethods__["name"] = _libnfs.nfsdirent_name_get
    if _newclass:name = _swig_property(_libnfs.nfsdirent_name_get, _libnfs.nfsdirent_name_set)
    __swig_setmethods__["inode"] = _libnfs.nfsdirent_inode_set
    __swig_getmethods__["inode"] = _libnfs.nfsdirent_inode_get
    if _newclass:inode = _swig_property(_libnfs.nfsdirent_inode_get, _libnfs.nfsdirent_inode_set)
    __swig_setmethods__["type"] = _libnfs.nfsdirent_type_set
    __swig_getmethods__["type"] = _libnfs.nfsdirent_type_get
    if _newclass:type = _swig_property(_libnfs.nfsdirent_type_get, _libnfs.nfsdirent_type_set)
    __swig_setmethods__["mode"] = _libnfs.nfsdirent_mode_set
    __swig_getmethods__["mode"] = _libnfs.nfsdirent_mode_get
    if _newclass:mode = _swig_property(_libnfs.nfsdirent_mode_get, _libnfs.nfsdirent_mode_set)
    __swig_setmethods__["size"] = _libnfs.nfsdirent_size_set
    __swig_getmethods__["size"] = _libnfs.nfsdirent_size_get
    if _newclass:size = _swig_property(_libnfs.nfsdirent_size_get, _libnfs.nfsdirent_size_set)
    __swig_setmethods__["atime"] = _libnfs.nfsdirent_atime_set
    __swig_getmethods__["atime"] = _libnfs.nfsdirent_atime_get
    if _newclass:atime = _swig_property(_libnfs.nfsdirent_atime_get, _libnfs.nfsdirent_atime_set)
    __swig_setmethods__["mtime"] = _libnfs.nfsdirent_mtime_set
    __swig_getmethods__["mtime"] = _libnfs.nfsdirent_mtime_get
    if _newclass:mtime = _swig_property(_libnfs.nfsdirent_mtime_get, _libnfs.nfsdirent_mtime_set)
    __swig_setmethods__["ctime"] = _libnfs.nfsdirent_ctime_set
    __swig_getmethods__["ctime"] = _libnfs.nfsdirent_ctime_get
    if _newclass:ctime = _swig_property(_libnfs.nfsdirent_ctime_get, _libnfs.nfsdirent_ctime_set)
    __swig_setmethods__["uid"] = _libnfs.nfsdirent_uid_set
    __swig_getmethods__["uid"] = _libnfs.nfsdirent_uid_get
    if _newclass:uid = _swig_property(_libnfs.nfsdirent_uid_get, _libnfs.nfsdirent_uid_set)
    __swig_setmethods__["gid"] = _libnfs.nfsdirent_gid_set
    __swig_getmethods__["gid"] = _libnfs.nfsdirent_gid_get
    if _newclass:gid = _swig_property(_libnfs.nfsdirent_gid_get, _libnfs.nfsdirent_gid_set)
    __swig_setmethods__["nlink"] = _libnfs.nfsdirent_nlink_set
    __swig_getmethods__["nlink"] = _libnfs.nfsdirent_nlink_get
    if _newclass:nlink = _swig_property(_libnfs.nfsdirent_nlink_get, _libnfs.nfsdirent_nlink_set)
    __swig_setmethods__["dev"] = _libnfs.nfsdirent_dev_set
    __swig_getmethods__["dev"] = _libnfs.nfsdirent_dev_get
    if _newclass:dev = _swig_property(_libnfs.nfsdirent_dev_get, _libnfs.nfsdirent_dev_set)
    __swig_setmethods__["rdev"] = _libnfs.nfsdirent_rdev_set
    __swig_getmethods__["rdev"] = _libnfs.nfsdirent_rdev_get
    if _newclass:rdev = _swig_property(_libnfs.nfsdirent_rdev_get, _libnfs.nfsdirent_rdev_set)
    __swig_setmethods__["blksize"] = _libnfs.nfsdirent_blksize_set
    __swig_getmethods__["blksize"] = _libnfs.nfsdirent_blksize_get
    if _newclass:blksize = _swig_property(_libnfs.nfsdirent_blksize_get, _libnfs.nfsdirent_blksize_set)
    __swig_setmethods__["blocks"] = _libnfs.nfsdirent_blocks_set
    __swig_getmethods__["blocks"] = _libnfs.nfsdirent_blocks_get
    if _newclass:blocks = _swig_property(_libnfs.nfsdirent_blocks_get, _libnfs.nfsdirent_blocks_set)
    __swig_setmethods__["used"] = _libnfs.nfsdirent_used_set
    __swig_getmethods__["used"] = _libnfs.nfsdirent_used_get
    if _newclass:used = _swig_property(_libnfs.nfsdirent_used_get, _libnfs.nfsdirent_used_set)
    __swig_setmethods__["atime_nsec"] = _libnfs.nfsdirent_atime_nsec_set
    __swig_getmethods__["atime_nsec"] = _libnfs.nfsdirent_atime_nsec_get
    if _newclass:atime_nsec = _swig_property(_libnfs.nfsdirent_atime_nsec_get, _libnfs.nfsdirent_atime_nsec_set)
    __swig_setmethods__["mtime_nsec"] = _libnfs.nfsdirent_mtime_nsec_set
    __swig_getmethods__["mtime_nsec"] = _libnfs.nfsdirent_mtime_nsec_get
    if _newclass:mtime_nsec = _swig_property(_libnfs.nfsdirent_mtime_nsec_get, _libnfs.nfsdirent_mtime_nsec_set)
    __swig_setmethods__["ctime_nsec"] = _libnfs.nfsdirent_ctime_nsec_set
    __swig_getmethods__["ctime_nsec"] = _libnfs.nfsdirent_ctime_nsec_get
    if _newclass:ctime_nsec = _swig_property(_libnfs.nfsdirent_ctime_nsec_get, _libnfs.nfsdirent_ctime_nsec_set)
    def __init__(self): 
        this = _libnfs.new_nfsdirent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libnfs.delete_nfsdirent
    __del__ = lambda self : None;
nfsdirent_swigregister = _libnfs.nfsdirent_swigregister
nfsdirent_swigregister(nfsdirent)

class nfs_server_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nfs_server_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nfs_server_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libnfs.nfs_server_list_next_set
    __swig_getmethods__["next"] = _libnfs.nfs_server_list_next_get
    if _newclass:next = _swig_property(_libnfs.nfs_server_list_next_get, _libnfs.nfs_server_list_next_set)
    __swig_setmethods__["addr"] = _libnfs.nfs_server_list_addr_set
    __swig_getmethods__["addr"] = _libnfs.nfs_server_list_addr_get
    if _newclass:addr = _swig_property(_libnfs.nfs_server_list_addr_get, _libnfs.nfs_server_list_addr_set)
    def __init__(self): 
        this = _libnfs.new_nfs_server_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libnfs.delete_nfs_server_list
    __del__ = lambda self : None;
nfs_server_list_swigregister = _libnfs.nfs_server_list_swigregister
nfs_server_list_swigregister(nfs_server_list)


def nfs_init_context():
  return _libnfs.nfs_init_context()
nfs_init_context = _libnfs.nfs_init_context

def nfs_destroy_context(*args):
  return _libnfs.nfs_destroy_context(*args)
nfs_destroy_context = _libnfs.nfs_destroy_context

def nfs_get_error(*args):
  return _libnfs.nfs_get_error(*args)
nfs_get_error = _libnfs.nfs_get_error

def nfs_set_auth(*args):
  return _libnfs.nfs_set_auth(*args)
nfs_set_auth = _libnfs.nfs_set_auth

def nfs_parse_url_full(*args):
  return _libnfs.nfs_parse_url_full(*args)
nfs_parse_url_full = _libnfs.nfs_parse_url_full

def nfs_parse_url_dir(*args):
  return _libnfs.nfs_parse_url_dir(*args)
nfs_parse_url_dir = _libnfs.nfs_parse_url_dir

def nfs_parse_url_incomplete(*args):
  return _libnfs.nfs_parse_url_incomplete(*args)
nfs_parse_url_incomplete = _libnfs.nfs_parse_url_incomplete

def nfs_destroy_url(*args):
  return _libnfs.nfs_destroy_url(*args)
nfs_destroy_url = _libnfs.nfs_destroy_url

def nfs_get_readmax(*args):
  return _libnfs.nfs_get_readmax(*args)
nfs_get_readmax = _libnfs.nfs_get_readmax

def nfs_get_writemax(*args):
  return _libnfs.nfs_get_writemax(*args)
nfs_get_writemax = _libnfs.nfs_get_writemax

def nfs_set_tcp_syncnt(*args):
  return _libnfs.nfs_set_tcp_syncnt(*args)
nfs_set_tcp_syncnt = _libnfs.nfs_set_tcp_syncnt

def nfs_set_uid(*args):
  return _libnfs.nfs_set_uid(*args)
nfs_set_uid = _libnfs.nfs_set_uid

def nfs_set_gid(*args):
  return _libnfs.nfs_set_gid(*args)
nfs_set_gid = _libnfs.nfs_set_gid

def nfs_set_readahead(*args):
  return _libnfs.nfs_set_readahead(*args)
nfs_set_readahead = _libnfs.nfs_set_readahead

def nfs_mount(*args):
  return _libnfs.nfs_mount(*args)
nfs_mount = _libnfs.nfs_mount

def nfs_stat64(*args):
  return _libnfs.nfs_stat64(*args)
nfs_stat64 = _libnfs.nfs_stat64

def nfs_lstat64(*args):
  return _libnfs.nfs_lstat64(*args)
nfs_lstat64 = _libnfs.nfs_lstat64

def nfs_fstat64(*args):
  return _libnfs.nfs_fstat64(*args)
nfs_fstat64 = _libnfs.nfs_fstat64

def nfs_open(*args):
  return _libnfs.nfs_open(*args)
nfs_open = _libnfs.nfs_open

def nfs_close(*args):
  return _libnfs.nfs_close(*args)
nfs_close = _libnfs.nfs_close

def nfs_pread(*args):
  return _libnfs.nfs_pread(*args)
nfs_pread = _libnfs.nfs_pread

def nfs_read(*args):
  return _libnfs.nfs_read(*args)
nfs_read = _libnfs.nfs_read

def nfs_pwrite(*args):
  return _libnfs.nfs_pwrite(*args)
nfs_pwrite = _libnfs.nfs_pwrite

def nfs_write(*args):
  return _libnfs.nfs_write(*args)
nfs_write = _libnfs.nfs_write

def nfs_lseek(*args):
  return _libnfs.nfs_lseek(*args)
nfs_lseek = _libnfs.nfs_lseek

def nfs_fsync(*args):
  return _libnfs.nfs_fsync(*args)
nfs_fsync = _libnfs.nfs_fsync

def nfs_truncate(*args):
  return _libnfs.nfs_truncate(*args)
nfs_truncate = _libnfs.nfs_truncate

def nfs_ftruncate(*args):
  return _libnfs.nfs_ftruncate(*args)
nfs_ftruncate = _libnfs.nfs_ftruncate

def nfs_mkdir(*args):
  return _libnfs.nfs_mkdir(*args)
nfs_mkdir = _libnfs.nfs_mkdir

def nfs_rmdir(*args):
  return _libnfs.nfs_rmdir(*args)
nfs_rmdir = _libnfs.nfs_rmdir

def nfs_creat(*args):
  return _libnfs.nfs_creat(*args)
nfs_creat = _libnfs.nfs_creat

def nfs_create(*args):
  return _libnfs.nfs_create(*args)
nfs_create = _libnfs.nfs_create

def nfs_mknod(*args):
  return _libnfs.nfs_mknod(*args)
nfs_mknod = _libnfs.nfs_mknod

def nfs_unlink(*args):
  return _libnfs.nfs_unlink(*args)
nfs_unlink = _libnfs.nfs_unlink

def nfs_opendir(*args):
  return _libnfs.nfs_opendir(*args)
nfs_opendir = _libnfs.nfs_opendir

def nfs_readdir(*args):
  return _libnfs.nfs_readdir(*args)
nfs_readdir = _libnfs.nfs_readdir

def nfs_closedir(*args):
  return _libnfs.nfs_closedir(*args)
nfs_closedir = _libnfs.nfs_closedir

def nfs_chdir(*args):
  return _libnfs.nfs_chdir(*args)
nfs_chdir = _libnfs.nfs_chdir

def nfs_getcwd(*args):
  return _libnfs.nfs_getcwd(*args)
nfs_getcwd = _libnfs.nfs_getcwd

def nfs_readlink(*args):
  return _libnfs.nfs_readlink(*args)
nfs_readlink = _libnfs.nfs_readlink

def nfs_chmod(*args):
  return _libnfs.nfs_chmod(*args)
nfs_chmod = _libnfs.nfs_chmod

def nfs_lchmod(*args):
  return _libnfs.nfs_lchmod(*args)
nfs_lchmod = _libnfs.nfs_lchmod

def nfs_fchmod(*args):
  return _libnfs.nfs_fchmod(*args)
nfs_fchmod = _libnfs.nfs_fchmod

def nfs_chown(*args):
  return _libnfs.nfs_chown(*args)
nfs_chown = _libnfs.nfs_chown

def nfs_lchown(*args):
  return _libnfs.nfs_lchown(*args)
nfs_lchown = _libnfs.nfs_lchown

def nfs_fchown(*args):
  return _libnfs.nfs_fchown(*args)
nfs_fchown = _libnfs.nfs_fchown

def nfs_utimes(*args):
  return _libnfs.nfs_utimes(*args)
nfs_utimes = _libnfs.nfs_utimes

def nfs_lutimes(*args):
  return _libnfs.nfs_lutimes(*args)
nfs_lutimes = _libnfs.nfs_lutimes

def nfs_utime(*args):
  return _libnfs.nfs_utime(*args)
nfs_utime = _libnfs.nfs_utime

def nfs_access(*args):
  return _libnfs.nfs_access(*args)
nfs_access = _libnfs.nfs_access

def nfs_symlink(*args):
  return _libnfs.nfs_symlink(*args)
nfs_symlink = _libnfs.nfs_symlink

def nfs_rename(*args):
  return _libnfs.nfs_rename(*args)
nfs_rename = _libnfs.nfs_rename

def nfs_link(*args):
  return _libnfs.nfs_link(*args)
nfs_link = _libnfs.nfs_link

def mount_getexports(*args):
  return _libnfs.mount_getexports(*args)
mount_getexports = _libnfs.mount_getexports

def mount_free_export_list(*args):
  return _libnfs.mount_free_export_list(*args)
mount_free_export_list = _libnfs.mount_free_export_list

def nfs_find_local_servers():
  return _libnfs.nfs_find_local_servers()
nfs_find_local_servers = _libnfs.nfs_find_local_servers

def free_nfs_srvr_list(*args):
  return _libnfs.free_nfs_srvr_list(*args)
free_nfs_srvr_list = _libnfs.free_nfs_srvr_list
# This file is compatible with both classic and new-style classes.


